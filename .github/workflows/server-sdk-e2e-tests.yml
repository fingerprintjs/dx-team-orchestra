name: Run Server SDK e2e tests

on:
  workflow_dispatch:
    inputs:
      sdk-version:
        description: "SDK version to set up"
        required: false
        type: string
        default: "latest"
      run-node-sdk-tests:
        description: "Should we run Node SDK tests?"
        required: false
        type: boolean
        default: false
      run-java-sdk-tests:
        description: "Should we run Java SDK tests?"
        required: false
        type: boolean
        default: false
      run-dotnet-sdk-tests:
        description: "Should we run .NET SDK tests?"
        required: false
        type: boolean
        default: false
      run-go-sdk-tests:
        description: "Should we run Go SDK tests?"
        required: false
        type: boolean
        default: false
      run-python-sdk-tests:
        description: "Should we run Python SDK tests?"
        required: false
        type: boolean
        default: false
      run-php-sdk-tests:
        description: "Should we run PHP SDK tests?"
        required: false
        type: boolean
        default: false
  schedule:
    - cron: "0 0 * * *" # Runs daily at midnight UTC
  push:
    branches:
      - main
  pull_request:
  repository_dispatch:
    types: [e2e_tests]

env:
  TRIGGER_REPOSITORY: ${{ github.event.client_payload.repository }}
  COMMIT_SHA: ${{ github.event.client_payload.sha }}
  TARGET_URL: https://github.com/fingerprintjs/dx-team-orchestra/actions/runs/${{github.run_id}}

jobs:
  set_datadog_team:
    name: 'Set Datadog team'
    uses: fingerprintjs/dx-team-toolkit/.github/workflows/set-datadog-team.yml@v1
    with:
      additionalTags: ${{ (github.event.client_payload && format('release-tag-name:{0},trigger-repository:{1}', github.event.client_payload.sdk-version, github.event.client_payload.repository)) || '' }}
    secrets:
      DD_API_KEY: ${{ secrets.INTEGRATIONS_DATADOG_API_KEY }}

  run-node-sdk-tests:
    if: ${{ (github.event_name != 'workflow_dispatch' && github.event_name != 'repository_dispatch') || inputs.run-node-sdk-tests || github.event.client_payload.run-node-sdk-tests }}
    runs-on: ubuntu-latest
    outputs:
      test_failed: ${{ steps.result.outputs.test_failed }}
    steps:
      - name: 'Get token for the GitHub App'
        uses: actions/create-github-app-token@f2acddfb5195534d487896a656232b016a682f3c
        id: generate-token
        with:
          app-id: ${{ vars.RUNNER_APP_ID }}
          private-key: ${{ secrets.RUNNER_APP_PRIVATE_KEY }}
          owner: fingerprintjs
          # TODO Add remaining SDK repos
          repositories: fingerprintjs-pro-server-api-node-sdk,dx-team-toolkit
      - name: Set status
        if: ${{ github.event_name == 'repository_dispatch' }}
        uses: Sibz/github-status-action@650dd1a882a76dbbbc4576fb5974b8d22f29847f
        with:
          authToken: ${{ steps.generate-token.outputs.token }}
          context: 'Node SDK E2E Tests'
          description: 'Pending'
          repository: ${{ env.TRIGGER_REPOSITORY }}
          state: 'pending'
          sha: ${{ env.COMMIT_SHA }}
          target_url: ${{ env.TARGET_URL }}

      - name: Checkout
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@ac5bf11548bf5e19b8aadb8182072616590fa4a6
        with:
          version: 9

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          cache: pnpm
          node-version: 18

      - name: Install dependencies
        run: pnpm install

      - name: Set up Node SDK version
        if: ${{ github.event_name != 'push' && github.event_name != 'pull_request' }}
        working-directory: ./projects/node-sdk
        run: ../../scripts/setup-sdk.sh node ${{ github.event_name }} ${{ github.event.client_payload.sdk-version || github.event.inputs.sdk-version }}

      - name: Install Playwright browsers
        working-directory: ./projects/conductor
        run: pnpm playwright install --with-deps

      # Start the server in the background
      - name: Start server
        run: |
          nohup pnpm start &

      # Run tests
      - name: Run tests
        working-directory: ./projects/conductor
        env:
          MUSICIAN_PORT: 3002
          MINIMUM_US_DEFAULT_PUBLIC_KEY: ${{ secrets.MINIMUM_US_DEFAULT_PUBLIC_KEY }}
          MINIMUM_US_DEFAULT_PRIVATE_KEY: ${{ secrets.MINIMUM_US_DEFAULT_PRIVATE_KEY }}
          MINIMUM_US_SEALED_PUBLIC_KEY: ${{ secrets.MINIMUM_US_SEALED_PUBLIC_KEY }}
          MINIMUM_US_SEALED_PRIVATE_KEY: ${{ secrets.MINIMUM_US_SEALED_PRIVATE_KEY }}
          MINIMUM_US_SEALED_ENCRYPTION_KEY: ${{ secrets.MINIMUM_US_SEALED_ENCRYPTION_KEY }}
          MAXIMUM_US_DEFAULT_PUBLIC_KEY: ${{ secrets.MAXIMUM_US_DEFAULT_PUBLIC_KEY }}
          MAXIMUM_US_DEFAULT_PRIVATE_KEY: ${{ secrets.MAXIMUM_US_DEFAULT_PRIVATE_KEY }}
          MAXIMUM_US_DEFAULT_DELETED_PRIVATE_KEY: ${{ secrets.MAXIMUM_US_DEFAULT_DELETED_PRIVATE_KEY }}
          MAXIMUM_US_SEALED_PUBLIC_KEY: ${{ secrets.MAXIMUM_US_SEALED_PUBLIC_KEY }}
          MAXIMUM_US_SEALED_PRIVATE_KEY: ${{ secrets.MAXIMUM_US_SEALED_PRIVATE_KEY }}
          MAXIMUM_US_SEALED_ENCRYPTION_KEY: ${{ secrets.MAXIMUM_US_SEALED_ENCRYPTION_KEY }}
          DEFAULT_EU_DEFAULT_PUBLIC_KEY: ${{ secrets.DEFAULT_EU_DEFAULT_PUBLIC_KEY }}
          DEFAULT_EU_DEFAULT_PRIVATE_KEY: ${{ secrets.DEFAULT_EU_DEFAULT_PRIVATE_KEY }}
        run: pnpm playwright test

      - name: Set test result on failure
        id: result
        if: failure()
        run: echo "test_failed=true" >> $GITHUB_OUTPUT

      - name: Set failed status
        if: ${{ github.event_name == 'repository_dispatch' && failure() }}
        uses: Sibz/github-status-action@650dd1a882a76dbbbc4576fb5974b8d22f29847f
        with:
          authToken: ${{ steps.generate-token.outputs.token }}
          context: 'Node SDK E2E Tests'
          description: 'Failure'
          repository: ${{ env.TRIGGER_REPOSITORY }}
          state: 'failure'
          sha: ${{ env.COMMIT_SHA }}
          target_url: ${{ env.TARGET_URL }}

      - name: Set succeeded status
        if: ${{ github.event_name == 'repository_dispatch' && success() }}
        uses: Sibz/github-status-action@650dd1a882a76dbbbc4576fb5974b8d22f29847f
        with:
          authToken: ${{ steps.generate-token.outputs.token }}
          context: 'Node SDK E2E Tests'
          description: 'Success'
          repository: ${{ env.TRIGGER_REPOSITORY }}
          state: 'success'
          sha: ${{ env.COMMIT_SHA }}
          target_url: ${{ env.TARGET_URL }}

  run-java-sdk-tests:
    if: ${{ (github.event_name != 'workflow_dispatch' && github.event_name != 'repository_dispatch') || inputs.run-java-sdk-tests || github.event.client_payload.run-java-sdk-tests }}
    runs-on: ubuntu-latest
    continue-on-error: true
    outputs:
      test_failed: ${{ steps.result.outputs.test_failed }}
    steps:
      - name: 'Get token for the GitHub App'
        uses: actions/create-github-app-token@f2acddfb5195534d487896a656232b016a682f3c
        id: generate-token
        with:
          app-id: ${{ vars.RUNNER_APP_ID }}
          private-key: ${{ secrets.RUNNER_APP_PRIVATE_KEY }}
          owner: fingerprintjs
          repositories: fingerprint-pro-server-api-java-sdk,dx-team-toolkit

      - name: Set status
        if: ${{ github.event_name == 'repository_dispatch' }}
        uses: Sibz/github-status-action@650dd1a882a76dbbbc4576fb5974b8d22f29847f
        with:
          authToken: ${{ steps.generate-token.outputs.token }}
          context: 'Java SDK E2E Tests'
          description: 'Pending'
          repository: ${{ env.TRIGGER_REPOSITORY }}
          state: 'pending'
          sha: ${{ env.COMMIT_SHA }}
          target_url: ${{ env.TARGET_URL }}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@ac5bf11548bf5e19b8aadb8182072616590fa4a6
        with:
          version: 9

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          cache: pnpm
          node-version: 18

      - name: Install dependencies
        run: pnpm install

      - name: Install Playwright browsers
        working-directory: ./projects/conductor
        run: pnpm playwright install --with-deps

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'zulu'

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Set up Java SDK version
        if: ${{ github.event_name != 'push' && github.event_name != 'pull_request' }}
        working-directory: ./projects/java-sdk
        run: ../../scripts/setup-sdk.sh java ${{ github.event_name }} ${{ github.event.client_payload.sdk-version || github.event.inputs.sdk-version }}

      - name: Build with Gradle
        working-directory: ./projects/java-sdk
        run: |
          ./gradlew clean build --no-daemon

      - name: Run the Java web server
        working-directory: ./projects/java-sdk
        run: |
          nohup java -jar build/libs/*-SNAPSHOT.jar &

      - name: Run tests
        working-directory: ./projects/conductor
        env:
          MUSICIAN_PORT: 8080
          MINIMUM_US_DEFAULT_PUBLIC_KEY: ${{ secrets.MINIMUM_US_DEFAULT_PUBLIC_KEY }}
          MINIMUM_US_DEFAULT_PRIVATE_KEY: ${{ secrets.MINIMUM_US_DEFAULT_PRIVATE_KEY }}
          MINIMUM_US_SEALED_PUBLIC_KEY: ${{ secrets.MINIMUM_US_SEALED_PUBLIC_KEY }}
          MINIMUM_US_SEALED_PRIVATE_KEY: ${{ secrets.MINIMUM_US_SEALED_PRIVATE_KEY }}
          MINIMUM_US_SEALED_ENCRYPTION_KEY: ${{ secrets.MINIMUM_US_SEALED_ENCRYPTION_KEY }}
          MAXIMUM_US_DEFAULT_PUBLIC_KEY: ${{ secrets.MAXIMUM_US_DEFAULT_PUBLIC_KEY }}
          MAXIMUM_US_DEFAULT_PRIVATE_KEY: ${{ secrets.MAXIMUM_US_DEFAULT_PRIVATE_KEY }}
          MAXIMUM_US_DEFAULT_DELETED_PRIVATE_KEY: ${{ secrets.MAXIMUM_US_DEFAULT_DELETED_PRIVATE_KEY }}
          MAXIMUM_US_SEALED_PUBLIC_KEY: ${{ secrets.MAXIMUM_US_SEALED_PUBLIC_KEY }}
          MAXIMUM_US_SEALED_PRIVATE_KEY: ${{ secrets.MAXIMUM_US_SEALED_PRIVATE_KEY }}
          MAXIMUM_US_SEALED_ENCRYPTION_KEY: ${{ secrets.MAXIMUM_US_SEALED_ENCRYPTION_KEY }}
          DEFAULT_EU_DEFAULT_PUBLIC_KEY: ${{ secrets.DEFAULT_EU_DEFAULT_PUBLIC_KEY }}
          DEFAULT_EU_DEFAULT_PRIVATE_KEY: ${{ secrets.DEFAULT_EU_DEFAULT_PRIVATE_KEY }}
        run: pnpm playwright test

      - name: Set test result on failure
        id: result
        if: failure()
        run: echo "test_failed=true" >> $GITHUB_OUTPUT

      - name: Set failed status
        if: ${{ github.event_name == 'repository_dispatch' && failure() }}
        uses: Sibz/github-status-action@650dd1a882a76dbbbc4576fb5974b8d22f29847f
        with:
          authToken: ${{ steps.generate-token.outputs.token }}
          context: 'Java SDK E2E Tests'
          description: 'Failure'
          repository: ${{ env.TRIGGER_REPOSITORY }}
          state: 'failure'
          sha: ${{ env.COMMIT_SHA }}
          target_url: ${{ env.TARGET_URL }}

      - name: Set succeeded status
        if: ${{ github.event_name == 'repository_dispatch' && success() }}
        uses: Sibz/github-status-action@650dd1a882a76dbbbc4576fb5974b8d22f29847f
        with:
          authToken: ${{ steps.generate-token.outputs.token }}
          context: 'Java SDK E2E Tests'
          description: 'Success'
          repository: ${{ env.TRIGGER_REPOSITORY }}
          state: 'success'
          sha: ${{ env.COMMIT_SHA }}
          target_url: ${{ env.TARGET_URL }}

  run-dotnet-sdk-tests:
    if: ${{ (github.event_name != 'workflow_dispatch' && github.event_name != 'repository_dispatch') || inputs.run-dotnet-sdk-tests || github.event.client_payload.run-dotnet-sdk-tests }}
    runs-on: ubuntu-latest
    continue-on-error: true
    outputs:
      test_failed: ${{ steps.result.outputs.test_failed }}
    steps:
      - name: 'Get token for the GitHub App'
        uses: actions/create-github-app-token@f2acddfb5195534d487896a656232b016a682f3c
        id: generate-token
        with:
          app-id: ${{ vars.RUNNER_APP_ID }}
          private-key: ${{ secrets.RUNNER_APP_PRIVATE_KEY }}
          owner: fingerprintjs
          repositories: fingerprint-pro-server-api-dotnet-sdk,dx-team-toolkit

      - name: Set status
        if: ${{ github.event_name == 'repository_dispatch' }}
        uses: Sibz/github-status-action@650dd1a882a76dbbbc4576fb5974b8d22f29847f
        with:
          authToken: ${{ steps.generate-token.outputs.token }}
          context: '.NET SDK E2E Tests'
          description: 'Pending'
          repository: ${{ env.TRIGGER_REPOSITORY }}
          state: 'pending'
          sha: ${{ env.COMMIT_SHA }}
          target_url: ${{ env.TARGET_URL }}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@ac5bf11548bf5e19b8aadb8182072616590fa4a6
        with:
          version: 9

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          cache: pnpm
          node-version: 18

      - name: Install dependencies
        run: pnpm install

      - name: Install Playwright browsers
        working-directory: ./projects/conductor
        run: pnpm playwright install --with-deps

      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0'

      - name: Restore dependencies
        run: dotnet restore ./projects/dotnet-sdk

      - name: Set up .NET SDK version
        if: ${{ github.event_name != 'push' && github.event_name != 'pull_request' }}
        working-directory: ./projects/dotnet-sdk
        run: ../../scripts/setup-sdk.sh dotnet ${{ github.event_name }} ${{ github.event.client_payload.sdk-version || github.event.inputs.sdk-version }}

      - name: Build the project
        run: dotnet publish ./projects/dotnet-sdk --configuration Release --output ./projects/dotnet-sdk/out

      - name: Run .NET application
        working-directory: ./projects/dotnet-sdk
        env:
          HTTP_PORTS: 5243
        run: |
          nohup dotnet ./out/dotnet-sdk.dll &

      - name: Run tests
        working-directory: ./projects/conductor
        env:
          MUSICIAN_PORT: 5243
          MINIMUM_US_DEFAULT_PUBLIC_KEY: ${{ secrets.MINIMUM_US_DEFAULT_PUBLIC_KEY }}
          MINIMUM_US_DEFAULT_PRIVATE_KEY: ${{ secrets.MINIMUM_US_DEFAULT_PRIVATE_KEY }}
          MINIMUM_US_SEALED_PUBLIC_KEY: ${{ secrets.MINIMUM_US_SEALED_PUBLIC_KEY }}
          MINIMUM_US_SEALED_PRIVATE_KEY: ${{ secrets.MINIMUM_US_SEALED_PRIVATE_KEY }}
          MINIMUM_US_SEALED_ENCRYPTION_KEY: ${{ secrets.MINIMUM_US_SEALED_ENCRYPTION_KEY }}
          MAXIMUM_US_DEFAULT_PUBLIC_KEY: ${{ secrets.MAXIMUM_US_DEFAULT_PUBLIC_KEY }}
          MAXIMUM_US_DEFAULT_PRIVATE_KEY: ${{ secrets.MAXIMUM_US_DEFAULT_PRIVATE_KEY }}
          MAXIMUM_US_DEFAULT_DELETED_PRIVATE_KEY: ${{ secrets.MAXIMUM_US_DEFAULT_DELETED_PRIVATE_KEY }}
          MAXIMUM_US_SEALED_PUBLIC_KEY: ${{ secrets.MAXIMUM_US_SEALED_PUBLIC_KEY }}
          MAXIMUM_US_SEALED_PRIVATE_KEY: ${{ secrets.MAXIMUM_US_SEALED_PRIVATE_KEY }}
          MAXIMUM_US_SEALED_ENCRYPTION_KEY: ${{ secrets.MAXIMUM_US_SEALED_ENCRYPTION_KEY }}
          DEFAULT_EU_DEFAULT_PUBLIC_KEY: ${{ secrets.DEFAULT_EU_DEFAULT_PUBLIC_KEY }}
          DEFAULT_EU_DEFAULT_PRIVATE_KEY: ${{ secrets.DEFAULT_EU_DEFAULT_PRIVATE_KEY }}
        run: pnpm playwright test

      - name: Set test result on failure
        id: result
        if: failure()
        run: echo "test_failed=true" >> $GITHUB_OUTPUT

      - name: Set failed status
        if: ${{ github.event_name == 'repository_dispatch' && failure() }}
        uses: Sibz/github-status-action@650dd1a882a76dbbbc4576fb5974b8d22f29847f
        with:
          authToken: ${{ steps.generate-token.outputs.token }}
          context: '.NET SDK E2E Tests'
          description: 'Failure'
          repository: ${{ env.TRIGGER_REPOSITORY }}
          state: 'failure'
          sha: ${{ env.COMMIT_SHA }}
          target_url: ${{ env.TARGET_URL }}

      - name: Set succeeded status
        if: ${{ github.event_name == 'repository_dispatch' && success() }}
        uses: Sibz/github-status-action@650dd1a882a76dbbbc4576fb5974b8d22f29847f
        with:
          authToken: ${{ steps.generate-token.outputs.token }}
          context: '.NET SDK E2E Tests'
          description: 'Success'
          repository: ${{ env.TRIGGER_REPOSITORY }}
          state: 'success'
          sha: ${{ env.COMMIT_SHA }}
          target_url: ${{ env.TARGET_URL }}

  run-go-sdk-tests:
    if: ${{ (github.event_name != 'workflow_dispatch' && github.event_name != 'repository_dispatch') || inputs.run-go-sdk-tests || github.event.client_payload.run-go-sdk-tests }}
    runs-on: ubuntu-latest
    continue-on-error: true
    outputs:
      test_failed: ${{ steps.result.outputs.test_failed }}
    steps:
      - name: 'Get token for the GitHub App'
        uses: actions/create-github-app-token@f2acddfb5195534d487896a656232b016a682f3c
        id: generate-token
        with:
          app-id: ${{ vars.RUNNER_APP_ID }}
          private-key: ${{ secrets.RUNNER_APP_PRIVATE_KEY }}
          owner: fingerprintjs
          repositories: fingerprint-pro-server-api-go-sdk,dx-team-toolkit

      - name: Set status
        if: ${{ github.event_name == 'repository_dispatch' }}
        uses: Sibz/github-status-action@650dd1a882a76dbbbc4576fb5974b8d22f29847f
        with:
          authToken: ${{ steps.generate-token.outputs.token }}
          context: 'Go SDK E2E Tests'
          description: 'Pending'
          repository: ${{ env.TRIGGER_REPOSITORY }}
          state: 'pending'
          sha: ${{ env.COMMIT_SHA }}
          target_url: ${{ env.TARGET_URL }}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@ac5bf11548bf5e19b8aadb8182072616590fa4a6
        with:
          version: 9

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          cache: pnpm
          node-version: 18

      - name: Install dependencies
        run: pnpm install

      - name: Install Playwright browsers
        working-directory: ./projects/conductor
        run: pnpm playwright install --with-deps

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-mod-

      - name: Set up Go SDK version
        if: ${{ github.event_name != 'push' && github.event_name != 'pull_request' }}
        working-directory: ./projects/go-sdk
        run: ../../scripts/setup-sdk.sh go ${{ github.event_name }} ${{ github.event.client_payload.sdk-version || github.event.inputs.sdk-version }}

      - name: Install dependencies
        working-directory: ./projects/go-sdk
        run: |
          go mod tidy

      - name: Build Go app
        working-directory: ./projects/go-sdk
        run: |
          go build -o myapp .

      - name: Run Go application
        working-directory: ./projects/go-sdk
        run: |
          nohup ./myapp &

      - name: Run tests
        working-directory: ./projects/conductor
        env:
          MUSICIAN_PORT: 8081
          MINIMUM_US_DEFAULT_PUBLIC_KEY: ${{ secrets.MINIMUM_US_DEFAULT_PUBLIC_KEY }}
          MINIMUM_US_DEFAULT_PRIVATE_KEY: ${{ secrets.MINIMUM_US_DEFAULT_PRIVATE_KEY }}
          MINIMUM_US_SEALED_PUBLIC_KEY: ${{ secrets.MINIMUM_US_SEALED_PUBLIC_KEY }}
          MINIMUM_US_SEALED_PRIVATE_KEY: ${{ secrets.MINIMUM_US_SEALED_PRIVATE_KEY }}
          MINIMUM_US_SEALED_ENCRYPTION_KEY: ${{ secrets.MINIMUM_US_SEALED_ENCRYPTION_KEY }}
          MAXIMUM_US_DEFAULT_PUBLIC_KEY: ${{ secrets.MAXIMUM_US_DEFAULT_PUBLIC_KEY }}
          MAXIMUM_US_DEFAULT_PRIVATE_KEY: ${{ secrets.MAXIMUM_US_DEFAULT_PRIVATE_KEY }}
          MAXIMUM_US_DEFAULT_DELETED_PRIVATE_KEY: ${{ secrets.MAXIMUM_US_DEFAULT_DELETED_PRIVATE_KEY }}
          MAXIMUM_US_SEALED_PUBLIC_KEY: ${{ secrets.MAXIMUM_US_SEALED_PUBLIC_KEY }}
          MAXIMUM_US_SEALED_PRIVATE_KEY: ${{ secrets.MAXIMUM_US_SEALED_PRIVATE_KEY }}
          MAXIMUM_US_SEALED_ENCRYPTION_KEY: ${{ secrets.MAXIMUM_US_SEALED_ENCRYPTION_KEY }}
          DEFAULT_EU_DEFAULT_PUBLIC_KEY: ${{ secrets.DEFAULT_EU_DEFAULT_PUBLIC_KEY }}
          DEFAULT_EU_DEFAULT_PRIVATE_KEY: ${{ secrets.DEFAULT_EU_DEFAULT_PRIVATE_KEY }}
        run: pnpm playwright test

      - name: Set test result on failure
        id: result
        if: failure()
        run: echo "test_failed=true" >> $GITHUB_OUTPUT

      - name: Set failed status
        if: ${{ github.event_name == 'repository_dispatch' && failure() }}
        uses: Sibz/github-status-action@650dd1a882a76dbbbc4576fb5974b8d22f29847f
        with:
          authToken: ${{ steps.generate-token.outputs.token }}
          context: 'Go SDK E2E Tests'
          description: 'Failure'
          repository: ${{ env.TRIGGER_REPOSITORY }}
          state: 'failure'
          sha: ${{ env.COMMIT_SHA }}
          target_url: ${{ env.TARGET_URL }}

      - name: Set succeeded status
        if: ${{ github.event_name == 'repository_dispatch' && success() }}
        uses: Sibz/github-status-action@650dd1a882a76dbbbc4576fb5974b8d22f29847f
        with:
          authToken: ${{ steps.generate-token.outputs.token }}
          context: 'Go SDK E2E Tests'
          description: 'Success'
          repository: ${{ env.TRIGGER_REPOSITORY }}
          state: 'success'
          sha: ${{ env.COMMIT_SHA }}
          target_url: ${{ env.TARGET_URL }}

  run-python-sdk-tests:
    if: ${{ (github.event_name != 'workflow_dispatch' && github.event_name != 'repository_dispatch') || inputs.run-python-sdk-tests || github.event.client_payload.run-python-sdk-tests }}
    runs-on: ubuntu-latest
    continue-on-error: true
    outputs:
      test_failed: ${{ steps.result.outputs.test_failed }}
    steps:
      - name: 'Get token for the GitHub App'
        uses: actions/create-github-app-token@f2acddfb5195534d487896a656232b016a682f3c
        id: generate-token
        with:
          app-id: ${{ vars.RUNNER_APP_ID }}
          private-key: ${{ secrets.RUNNER_APP_PRIVATE_KEY }}
          owner: fingerprintjs
          repositories: fingerprint-pro-server-api-python-sdk,dx-team-toolkit

      - name: Set status
        if: ${{ github.event_name == 'repository_dispatch' }}
        uses: Sibz/github-status-action@650dd1a882a76dbbbc4576fb5974b8d22f29847f
        with:
          authToken: ${{ steps.generate-token.outputs.token }}
          context: 'Python SDK E2E Tests'
          description: 'Pending'
          repository: ${{ env.TRIGGER_REPOSITORY }}
          state: 'pending'
          sha: ${{ env.COMMIT_SHA }}
          target_url: ${{ env.TARGET_URL }}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@ac5bf11548bf5e19b8aadb8182072616590fa4a6
        with:
          version: 9

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          cache: pnpm
          node-version: 18

      - name: Install dependencies
        run: pnpm install

      - name: Install Playwright browsers
        working-directory: ./projects/conductor
        run: pnpm playwright install --with-deps

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.9

      - name: Install dependencies
        working-directory: ./projects/python-sdk
        run: |
          pip install -r requirements.txt

      - name: Set up Python SDK version
        if: ${{ github.event_name != 'push' && github.event_name != 'pull_request' }}
        working-directory: ./projects/python-sdk
        run: ../../scripts/setup-sdk.sh python ${{ github.event_name }} ${{ github.event.client_payload.sdk-version || github.event.inputs.sdk-version }}

      - name: Run Python application
        working-directory: ./projects/python-sdk
        run: |
          nohup python main.py &

      - name: Run tests
        working-directory: ./projects/conductor
        env:
          MUSICIAN_PORT: 3003
          MINIMUM_US_DEFAULT_PUBLIC_KEY: ${{ secrets.MINIMUM_US_DEFAULT_PUBLIC_KEY }}
          MINIMUM_US_DEFAULT_PRIVATE_KEY: ${{ secrets.MINIMUM_US_DEFAULT_PRIVATE_KEY }}
          MINIMUM_US_SEALED_PUBLIC_KEY: ${{ secrets.MINIMUM_US_SEALED_PUBLIC_KEY }}
          MINIMUM_US_SEALED_PRIVATE_KEY: ${{ secrets.MINIMUM_US_SEALED_PRIVATE_KEY }}
          MINIMUM_US_SEALED_ENCRYPTION_KEY: ${{ secrets.MINIMUM_US_SEALED_ENCRYPTION_KEY }}
          MAXIMUM_US_DEFAULT_PUBLIC_KEY: ${{ secrets.MAXIMUM_US_DEFAULT_PUBLIC_KEY }}
          MAXIMUM_US_DEFAULT_PRIVATE_KEY: ${{ secrets.MAXIMUM_US_DEFAULT_PRIVATE_KEY }}
          MAXIMUM_US_DEFAULT_DELETED_PRIVATE_KEY: ${{ secrets.MAXIMUM_US_DEFAULT_DELETED_PRIVATE_KEY }}
          MAXIMUM_US_SEALED_PUBLIC_KEY: ${{ secrets.MAXIMUM_US_SEALED_PUBLIC_KEY }}
          MAXIMUM_US_SEALED_PRIVATE_KEY: ${{ secrets.MAXIMUM_US_SEALED_PRIVATE_KEY }}
          MAXIMUM_US_SEALED_ENCRYPTION_KEY: ${{ secrets.MAXIMUM_US_SEALED_ENCRYPTION_KEY }}
          DEFAULT_EU_DEFAULT_PUBLIC_KEY: ${{ secrets.DEFAULT_EU_DEFAULT_PUBLIC_KEY }}
          DEFAULT_EU_DEFAULT_PRIVATE_KEY: ${{ secrets.DEFAULT_EU_DEFAULT_PRIVATE_KEY }}
        run: pnpm playwright test

      - name: Set test result on failure
        id: result
        if: failure()
        run: echo "test_failed=true" >> $GITHUB_OUTPUT

      - name: Set failed status
        if: ${{ github.event_name == 'repository_dispatch' && failure() }}
        uses: Sibz/github-status-action@650dd1a882a76dbbbc4576fb5974b8d22f29847f
        with:
          authToken: ${{ steps.generate-token.outputs.token }}
          context: 'Python SDK E2E Tests'
          description: 'Failure'
          repository: ${{ env.TRIGGER_REPOSITORY }}
          state: 'failure'
          sha: ${{ env.COMMIT_SHA }}
          target_url: ${{ env.TARGET_URL }}

      - name: Set succeeded status
        if: ${{ github.event_name == 'repository_dispatch' && success() }}
        uses: Sibz/github-status-action@650dd1a882a76dbbbc4576fb5974b8d22f29847f
        with:
          authToken: ${{ steps.generate-token.outputs.token }}
          context: 'Python SDK E2E Tests'
          description: 'Success'
          repository: ${{ env.TRIGGER_REPOSITORY }}
          state: 'success'
          sha: ${{ env.COMMIT_SHA }}
          target_url: ${{ env.TARGET_URL }}

  run-php-sdk-tests:
    if: ${{ (github.event_name != 'workflow_dispatch' && github.event_name != 'repository_dispatch') || inputs.run-php-sdk-tests || github.event.client_payload.run-php-sdk-tests }}
    runs-on: ubuntu-latest
    continue-on-error: true
    outputs:
      test_failed: ${{ steps.result.outputs.test_failed }}
    steps:
      - name: 'Get token for the GitHub App'
        uses: actions/create-github-app-token@f2acddfb5195534d487896a656232b016a682f3c
        id: generate-token
        with:
          app-id: ${{ vars.RUNNER_APP_ID }}
          private-key: ${{ secrets.RUNNER_APP_PRIVATE_KEY }}
          owner: fingerprintjs
          repositories: fingerprint-pro-server-api-php-sdk,dx-team-toolkit

      - name: Set status
        if: ${{ github.event_name == 'repository_dispatch' }}
        uses: Sibz/github-status-action@650dd1a882a76dbbbc4576fb5974b8d22f29847f
        with:
          authToken: ${{ steps.generate-token.outputs.token }}
          context: 'PHP SDK E2E Tests'
          description: 'Pending'
          repository: ${{ env.TRIGGER_REPOSITORY }}
          state: 'pending'
          sha: ${{ env.COMMIT_SHA }}
          target_url: ${{ env.TARGET_URL }}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@ac5bf11548bf5e19b8aadb8182072616590fa4a6
        with:
          version: 9

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          cache: pnpm
          node-version: 18

      - name: Install dependencies
        run: pnpm install

      - name: Install Playwright browsers
        working-directory: ./projects/conductor
        run: pnpm playwright install --with-deps

      - name: Set up PHP
        uses: shivammathur/setup-php@9e72090525849c5e82e596468b86eb55e9cc5401
        with:
          php-version: '8.1'
          tools: composer:v2

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install dependencies
        working-directory: ./projects/php-sdk
        run: |
          composer install --no-interaction

      - name: Set up PHP SDK version
        if: ${{ github.event_name != 'push' && github.event_name != 'pull_request' }}
        working-directory: ./projects/php-sdk
        run: ../../scripts/setup-sdk.sh php ${{ github.event_name }} ${{ github.event.client_payload.sdk-version || github.event.inputs.sdk-version }}

      - name: Run PHP built-in server
        working-directory: ./projects/php-sdk
        run: |
          nohup php -S 0.0.0.0:3004 -t public/ &

      - name: Run tests
        working-directory: ./projects/conductor
        env:
          MUSICIAN_PORT: 3004
          MINIMUM_US_DEFAULT_PUBLIC_KEY: ${{ secrets.MINIMUM_US_DEFAULT_PUBLIC_KEY }}
          MINIMUM_US_DEFAULT_PRIVATE_KEY: ${{ secrets.MINIMUM_US_DEFAULT_PRIVATE_KEY }}
          MINIMUM_US_SEALED_PUBLIC_KEY: ${{ secrets.MINIMUM_US_SEALED_PUBLIC_KEY }}
          MINIMUM_US_SEALED_PRIVATE_KEY: ${{ secrets.MINIMUM_US_SEALED_PRIVATE_KEY }}
          MINIMUM_US_SEALED_ENCRYPTION_KEY: ${{ secrets.MINIMUM_US_SEALED_ENCRYPTION_KEY }}
          MAXIMUM_US_DEFAULT_PUBLIC_KEY: ${{ secrets.MAXIMUM_US_DEFAULT_PUBLIC_KEY }}
          MAXIMUM_US_DEFAULT_PRIVATE_KEY: ${{ secrets.MAXIMUM_US_DEFAULT_PRIVATE_KEY }}
          MAXIMUM_US_DEFAULT_DELETED_PRIVATE_KEY: ${{ secrets.MAXIMUM_US_DEFAULT_DELETED_PRIVATE_KEY }}
          MAXIMUM_US_SEALED_PUBLIC_KEY: ${{ secrets.MAXIMUM_US_SEALED_PUBLIC_KEY }}
          MAXIMUM_US_SEALED_PRIVATE_KEY: ${{ secrets.MAXIMUM_US_SEALED_PRIVATE_KEY }}
          MAXIMUM_US_SEALED_ENCRYPTION_KEY: ${{ secrets.MAXIMUM_US_SEALED_ENCRYPTION_KEY }}
          DEFAULT_EU_DEFAULT_PUBLIC_KEY: ${{ secrets.DEFAULT_EU_DEFAULT_PUBLIC_KEY }}
          DEFAULT_EU_DEFAULT_PRIVATE_KEY: ${{ secrets.DEFAULT_EU_DEFAULT_PRIVATE_KEY }}
        run: pnpm playwright test

      - name: Set test result on failure
        id: result
        if: failure()
        run: echo "test_failed=true" >> $GITHUB_OUTPUT

      - name: Set failed status
        if: ${{ github.event_name == 'repository_dispatch' && failure() }}
        uses: Sibz/github-status-action@650dd1a882a76dbbbc4576fb5974b8d22f29847f
        with:
          authToken: ${{ steps.generate-token.outputs.token }}
          context: 'PHP SDK E2E Tests'
          description: 'Failure'
          repository: ${{ env.TRIGGER_REPOSITORY }}
          state: 'failure'
          sha: ${{ env.COMMIT_SHA }}
          target_url: ${{ env.TARGET_URL }}

      - name: Set succeeded status
        if: ${{ github.event_name == 'repository_dispatch' && success() }}
        uses: Sibz/github-status-action@650dd1a882a76dbbbc4576fb5974b8d22f29847f
        with:
          authToken: ${{ steps.generate-token.outputs.token }}
          context: 'PHP SDK E2E Tests'
          description: 'Success'
          repository: ${{ env.TRIGGER_REPOSITORY }}
          state: 'success'
          sha: ${{ env.COMMIT_SHA }}
          target_url: ${{ env.TARGET_URL }}

  check-test-results:
    needs:
      - run-node-sdk-tests
      - run-java-sdk-tests
      - run-dotnet-sdk-tests
      - run-go-sdk-tests
      - run-python-sdk-tests
      - run-php-sdk-tests
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checks the statuses from each job
        run: |
          failed=false
          if [ "${{ needs.run-node-sdk-tests.outputs.test_failed }}" = "true" ]; then
            echo "Node SDK tests failed"
            failed=true
          fi

          if [ "${{ needs.run-java-sdk-tests.outputs.test_failed }}" = "true" ]; then
            echo "Java SDK tests failed"
            failed=true
          fi

          if [ "${{ needs.run-dotnet-sdk-tests.outputs.test_failed }}" = "true" ]; then
            echo ".NET SDK tests failed"
            failed=true
          fi

          if [ "${{ needs.run-go-sdk-tests.outputs.test_failed }}" = "true" ]; then
            echo "Go SDK tests failed"
            failed=true
          fi

          if [ "${{ needs.run-python-sdk-tests.outputs.test_failed }}" = "true" ]; then
            echo "Python SDK tests failed"
            failed=true
          fi

          if [ "${{ needs.run-php-sdk-tests.outputs.test_failed }}" = "true" ]; then
            echo "PHP SDK tests failed"
            failed=true
          fi

          if [ "$failed" = "true" ]; then
            echo "Jobs failed"
            exit 1
          else
            echo "All jobs succeeded"
          fi
